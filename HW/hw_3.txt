Questions

Q1 (20 pts). Start sparkR session correctly. Use the nyc_taxi_Aug table in Hive you previously
created for HW1. Create a Spark DataFrame in R and load all the taxi trips started on Aug. 1.
Show the top 25 rows of this Spark DataFrame.

Q2 (20 pts). Write R code in SparkR to find trips on Aug. 1 paid for by credit card (CRD) and trips
paid for by cash (CSH) from the Spark DataFrame created in Q1. Save these two groups of trips
into two new Spark DataFrames, namely, “Trips_CRD” and “Trips_CSH”. Use the Spark
DataFrame functions (e.g., SELECT, WHERE, groupBy) instead of using the sql() function in this
question. Show the first 20 rows of each DataFrame to validate the results.

Q3 (20 pts). Use the two DataFrames created in Q2 to perform the following analysis in SparkR.
Calculate the percentage of tip with respect to all the other charges (i.e., tip_percent =
tip_amount/( total_payment – tip_amount)). Generate two new Spark DataFrames with the
extra tip_percent column added to the “Trips_CRD” and the “’Trips_CSH” DataFrames,
respectively. You will get two new Spark DataFrames, “Trips_CRD_Pct” and “Trips_CSH_Pct”.
Again, you must use Spark DataFrame functions to solve this problem, rather than sending
queries to Hive using sql().

Q4 (15 pts). Use the spark DataFrames you obtained from Q3 to calculate on average how many
percent passengers tip (average of tip_percent) when paying by credit card and by cash,
respectively. The results should be two numbers. Again you must not use the sql() function.

Q5. (25 pts) For each day in August, calculate the total revenue of all the taxi drivers. The total
revenue of a day is the total amount of money paid in all the trips that end on that day. You
need to load the whole month’s data again into a Spark DataFrame (using sql()). Then use the
SparkR DataFrame functions (e.g., SELECT, WHERE, groupBy) to aggregate the results into
another Spark DataFrame with 31 rows. Convert the second spark DataFrame to an R data
frame. Finally, generate a line chart to visualize the data, where the X-axis is the day of month
and the Y-axis is the total revenue of all the taxi drivers on that day. Name this image file
“plot.png”. Save the image file and include it in your submission.

----------------------------------------------------------------------------------------------------------------------------

Answers for the above questions
-- Q1. - sql("use smurugesan");
		- nyc_aug_data <- sql("SELECT * FROM nyc_taxi_aug")
		- first_day_pickup <- sql("SELECT * FROM nyc_taxi_aug where day(pickup_datetime) = 1")
		- showDF(first_day_pickup, 25)

-- Q2 
		- Trips_CSH <- where(first_day_pickup, first_day_pickup$payment_type=="CSH")
		- Trips_CRD <- where(first_day_pickup, first_day_pickup$payment_type=="CRD")
		- showDF(Trips_CSH)
		- showDF(Trips_CRD)

-- Q3. 
		- Trips_CSH_Pst = select(Trips_CSH, c(colnames(Trips_CSH), Trips_CSH$tip_amount/(Trips_CSH$total_amount - Trips_CSH$tip_amount)))
		- names(Trips_CSH_Pst)[length(names(Trips_CSH_Pst))]<-"tip_percent"

		- Trips_CRD_Pst = select(Trips_CRD, c(colnames(Trips_CRD), Trips_CRD$tip_amount/(Trips_CRD$total_amount - Trips_CRD$tip_amount)))
		- names(Trips_CRD_Pst)[length(names(Trips_CRD_Pst))]<-"tip_percent"

-- Q4. 
		- showDF(avg(groupBy(Trips_CSH_Pst, "payment_type")))[14]
		- showDF(avg(groupBy(Trips_CRD_Pst, "payment_type")))[14]

-- Q5. 
		- nyc_aug_data <- sql("SELECT * FROM nyc_taxi_aug")
		- revenue_on_each_day<-agg(groupBy(nyc_aug_data, dayofmonth(nyc_aug_data$dropoff_datetime)), total_amount = "sum")
		- revenue_on_each_day_r = collect(revenue_on_each_day)
		- library(ggplot2)
		- names(revenue_on_each_day_r)[1]<-paste("day_of_month")
		- names(revenue_on_each_day_r)[2]<-paste("total_amount")
		
		- png("revenue_day.png")
		- qplot(revenue_on_each_day_r$day_of_month, revenue_on_each_day_r$total_amount, geom="line")
		- dev.off()



//Comments
sql("use smurugesan")
nyc_aug_data <- sql("SELECT * FROM nyc_taxi_aug")
first_day_pickup <- sql("SELECT * FROM nyc_taxi_aug where day(pickup_datetime) = 1")
Trips_CSH <- where(first_day_pickup, first_day_pickup$payment_type=="CSH")
Trips_CRD <- where(first_day_pickup, first_day_pickup$payment_type=="CRD")
Trips_CSH_Pst = select(Trips_CSH, c(colnames(Trips_CSH), Trips_CSH$tip_amount/(Trips_CSH$total_amount - Trips_CSH$tip_amount)))
Trips_CRD_Pst = select(Trips_CRD, c(colnames(Trips_CRD), Trips_CRD$tip_amount/(Trips_CRD$total_amount - Trips_CRD$tip_amount)))

showDF(agg(groupBy(Trips_CSH_Pst, Trips_CSH_Pst$payment_type), Trips_CSH_Pst$tip_percent="avg") )



CREATE TABLE IF NOT EXISTS online_retail(InvoiceNo int, StockCode int, Description String, Quantity int, InvoiceDate timestamp, UnitPrice double, CustomerId int, Country String) ROW FORMAT DELIMITED FIELDS TERMINATED BY ','LINES TERMINATED BY '\n'STORED AS TEXTFILE tblproperties("skip.header.line.count"="1");

Load data local inpath "online_retail.csv" into table online_retail;

Select StockCode, Description, SUM(Quantity) as qt from online_retail Group by StockCode, Description Order by Qt desc Limit 10;

sql('use smurugesan')
df_retail <- sql("SELECT * FROM online_retail")
df_retail <- dropna(df_retail)
df_retail <- where(df_retail, year(df_retail$InvoiceDate)==2011)

df_retail$Description, df_retail$Quantity, df_retail$InvoiceDate, df_retail$UnitPrice, df_retail$CustomerId, df_retail$Country, df_retail$Quantity * df_retail$UnitPrice)


df_retail_revenue = agg(groupBy(df_retail, month(df_retail$InvoiceDate)), SubTotal="sum")
showDF(df_retail_revenue)
df_retail_revenue_r = collect(df_retail_revenue)


showDF(select(employee, employee$eid, employee$name, employee$salary, employee$salary*0.1))


   month(InvoiceDate) sum(SubTotal)
                  12      494051.5
                   1      497482.2
                   6      603411.3
                   3      526068.4
                   5      599736.7
                   9      878833.6
                   4      405226.5
                   8      580852.3
                   7      531686.3
                  10      939738.9
                  11     1057634.2
                   2      396318.2

Q1) 
CREATE TABLE IF NOT EXISTS online_retail(InvoiceNo int, StockCode int, Description String, Quantity int, InvoiceDate timestamp, UnitPrice double, CustomerId int, Country String) ROW FORMAT DELIMITED FIELDS TERMINATED BY ','LINES TERMINATED BY '\n'STORED AS TEXTFILE tblproperties("skip.header.line.count"="1");

Load data local inpath "online_retail.csv" into table online_retail;


Q2)
Select StockCode, Description, SUM(Quantity) as qt from online_retail Group by StockCode, Description Order by Qt desc Limit 10;


Q3) 
sql('use smurugesan')
df_retail <- sql("SELECT * FROM online_retail")
df_retail <- dropna(df_retail)
df_retail <- where(df_retail, year(df_retail$InvoiceDate)==2011)
df_retail <- select(df_retail, df_retail$InvoiceNo, df_retail$StockCode, df_retail$Description, df_retail$Quantity, df_retail$InvoiceDate, df_retail$UnitPrice, df_retail$CustomerId, df_retail$Country, df_retail$Quantity * df_retail$UnitPrice)
names(df_retail)[9] = "SubTotal"

Q4)
df_retail_revenue = agg(groupBy(df_retail, month(df_retail$InvoiceDate)), SubTotal="sum")
df_retail_revenue_r = collect(df_retail_revenue)

Q5)
   month(InvoiceDate) sum(SubTotal)
                  12      494051.5
                   1      497482.2
                   6      603411.3
                   3      526068.4
                   5      599736.7
                   9      878833.6
                   4      405226.5
                   8      580852.3
                   7      531686.3
                  10      939738.9
                  11     1057634.2
                   2      396318.2

